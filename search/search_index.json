{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>In today's rapidly evolving world of finance, the need for data science skills in investing has become increasingly clear. Bridging the gap between the tech and finance worlds is crucial, equipping financial analysts with the tools and knowledge to approach data analysis from a best practice perspective. Drawing upon proven methodologies from the tech industry, effective data management, wrangling, insightful reporting, research, and maintaining analytical assets are key skills to master. Rather than focusing on building models from scratch, a unified framework emphasizing how investment analysis should be approached in the modern era is essential. Developing a strong foundation in data-driven financial analysis positions analysts to tackle real-world challenges and drive investment decisions with confidence.</p>"},{"location":"#course-layout","title":"Course layout","text":"<p>This project is laid in in self contained sections which can be read in isolation. However the struture is designed to give a progressive introduction to the topic and will cover the amount of detail needed to know by a financial analyst.</p>"},{"location":"#contact","title":"Contact","text":"<p><code>michael@whypred.com</code></p>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/","title":"IDE vs Notebooks","text":"<p>When working with Python, you have the option to use either notebooks or Integrated Development Environments (IDEs). Let's explore the differences between these two approaches and their respective advantages and disadvantages.</p>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#python-notebooks","title":"Python Notebooks","text":"<p>Python notebooks, such as Jupyter Notebook and JupyterLab, provide an interactive environment where you can combine code, documentation, and visualizations in a single document. Here are some key aspects of using Python notebooks:</p>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#advantages","title":"Advantages:","text":"<ul> <li>Interactive Execution: Notebooks allow you to execute code cells individually, enabling interactive exploration and experimentation with code and data.</li> <li>Inline Documentation: You can include markdown cells alongside code cells to provide explanations, insights, and context within the notebook itself.</li> <li>Visualization Integration: Notebooks seamlessly integrate with data visualization libraries, allowing you to create and display plots, charts, and graphs directly within the notebook.</li> <li>Sharing and Collaboration: Notebooks can be easily shared with others, making it convenient for collaboration and presenting results.</li> </ul>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#disadvantages","title":"Disadvantages:","text":"<ul> <li>Limited Scalability: Notebooks are not well-suited for large-scale projects or complex codebases, as they can become cluttered and difficult to navigate.</li> <li>Lack of Advanced IDE Features: Notebooks may lack some advanced features found in IDEs, such as advanced debugging tools, code refactoring, and comprehensive code analysis.</li> <li>Version Control Challenges: Version control and collaboration can be more challenging with notebooks compared to traditional code files.</li> </ul>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#integrated-development-environments-ides","title":"Integrated Development Environments (IDEs)","text":"<p>IDEs, such as PyCharm, Visual Studio Code, and Spyder, provide a comprehensive development environment for writing, debugging, and managing Python code. Here are some key aspects of using IDEs:</p>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#advantages_1","title":"Advantages:","text":"<ul> <li>Code Management: IDEs offer robust features for organizing and managing larger codebases, including project-level organization, code navigation, and refactoring tools.</li> <li>Advanced Debugging: IDEs provide powerful debugging tools, including breakpoints, step-through debugging, and variable inspection, making it easier to identify and fix issues in your code.</li> <li>Code Analysis and Optimization: IDEs often include code analysis tools that can help identify potential errors, suggest improvements, and optimize code performance.</li> <li>Integration with Version Control: IDEs seamlessly integrate with version control systems like Git, making it easier to manage code changes and collaborate with others.</li> </ul>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#disadvantages_1","title":"Disadvantages:","text":"<ul> <li>Steeper Learning Curve: IDEs can have a steeper learning curve compared to notebooks, especially for beginners, due to their extensive features and configurations.</li> <li>Less Interactive: IDEs are designed for writing and executing code files rather than providing an interactive environment like notebooks.</li> <li>Limited Inline Documentation: While IDEs support code comments and docstrings, they don't provide the same level of inline documentation capabilities as notebooks.</li> </ul>"},{"location":"Introduction%20to%20Programming/IDE%20vs%20Notebooks/#choosing-the-right-approach-for-financial-data-analysis","title":"Choosing the Right Approach for Financial Data Analysis","text":"<p>In an investment environment rarely will preference dictate the choice of the IDE vs </p> <p>The choice between using Python notebooks or IDEs depends on your specific needs and preferences:</p> <ul> <li>If you are working on data analysis, exploration, or small-scale projects, and you value interactivity and inline documentation, Python notebooks like Jupyter Notebook can be a great choice.</li> <li>If you are working on larger projects, require advanced debugging and code management features, or prefer a more traditional development environment, IDEs like PyCharm or Visual Studio Code may be more suitable.</li> </ul> <p>Ultimately, both notebooks and IDEs have their strengths and weaknesses, and many Python developers use a combination of both depending on the task at hand.</p>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/","title":"Setting up with Python","text":"<p>Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. It was created by Guido van Rossum and first released in 1991. Python emphasizes code readability through its use of indentation and a clean, expressive syntax.</p>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#key-features","title":"Key Features","text":"<ul> <li>Interpreted: Python code is executed directly by the Python interpreter, eliminating the need for compilation.</li> <li>Dynamically Typed: Variables in Python can hold values of different types, and type checking is performed at runtime.</li> <li>Object-Oriented: Python supports object-oriented programming paradigms, allowing for the creation of classes and objects.</li> <li>Extensive Standard Library: Python comes with a vast standard library that provides a wide range of built-in modules and functions for various tasks.</li> <li>Third-Party Packages: Python has a large ecosystem of third-party packages available through the Python Package Index (PyPI), enabling developers to leverage existing code and accelerate development.</li> </ul>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#popularity-in-data-science","title":"Popularity in Data Science","text":"<p>Python has gained immense popularity in the field of data science due to several reasons:</p> <ol> <li> <p>Data Manipulation and Analysis: Python provides powerful libraries like NumPy, Pandas, and SciPy, which offer efficient data structures and functions for numerical computing, data manipulation, and scientific computing.</p> </li> <li> <p>Machine Learning and Deep Learning: Libraries such as scikit-learn, TensorFlow, and PyTorch have made Python a go-to language for machine learning and deep learning tasks. These libraries provide high-level APIs and abstractions, making it easier to build and train models.</p> </li> <li> <p>Visualization: Python offers excellent data visualization libraries like Matplotlib, Seaborn, and Plotly, enabling data scientists to create informative and visually appealing charts, graphs, and plots.</p> </li> <li> <p>Jupyter Notebooks: Python integrates seamlessly with Jupyter Notebooks, an interactive development environment that combines code, documentation, and visualizations in a single document. Jupyter Notebooks have become a standard tool for data exploration, analysis, and sharing results.</p> </li> <li> <p>Community and Ecosystem: Python has a large and active community of developers and data scientists who contribute to its growth and provide support. The extensive ecosystem of libraries, frameworks, and tools makes it easier to find solutions to common problems and accelerates development.</p> </li> </ol>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#getting-started","title":"Getting Started","text":"<p>To start using Python, follow these steps:</p>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#1-install-python-using-anaconda","title":"1. Install Python using Anaconda","text":"<p>Anaconda is a popular distribution of Python that includes a wide range of pre-installed packages and tools for data science and scientific computing. Here's how to install Python using Anaconda:</p> <ol> <li>Visit the Anaconda website: anaconda.com</li> <li>Click on the \"Download\" button and select the appropriate version of Anaconda for your operating system.</li> <li>Follow the installation instructions provided by the installer.</li> <li>Once the installation is complete, you can launch Anaconda Navigator, which provides a graphical interface to manage your Python environments and launch various tools.</li> </ol>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#2-set-up-visual-studio-code","title":"2. Set up Visual Studio Code","text":"<p>Visual Studio Code (VS Code) is a lightweight and powerful code editor that offers excellent support for Python development. Here's how to set up VS Code for Python:</p> <ol> <li>Download and install VS Code from the official website: code.visualstudio.com</li> <li>Launch VS Code and open the Extensions view by clicking on the square icon in the Activity Bar on the left or by pressing <code>Ctrl+Shift+X</code> (<code>Cmd+Shift+X</code> on macOS).</li> <li>Search for the \"Python\" extension by Microsoft and click on the \"Install\" button.</li> <li>After the installation is complete, you can create a new Python file by clicking on \"File\" -&gt; \"New File\" and saving it with a <code>.py</code> extension.</li> <li>VS Code will automatically detect the Python environment created by Anaconda and provide you with features like syntax highlighting, code completion, and debugging.</li> </ol>"},{"location":"Introduction%20to%20Programming/Setting%20up%20with%20Python/#3-start-learning-python","title":"3. Start Learning Python","text":"<p>With Python and VS Code set up, you can begin learning the Python syntax and exploring its capabilities. Here are a few resources to get you started:</p> <ul> <li>Python's official documentation: docs.python.org</li> <li>Python tutorials on the official website: python.org/doc/tutorials</li> <li>Online learning platforms like Codecademy, Coursera, and edX offer Python courses for beginners.</li> <li>Books like \"Python Crash Course\" by Eric Matthes and \"Automate the Boring Stuff with Python\" by Al Sweigart are great resources for learning Python.</li> </ul> <p>As you progress in your Python journey, you can explore the vast ecosystem of libraries and frameworks available for various domains, such as data science, web development, and machine learning.ersatility, and strong community support make it an excellent choice for a wide range of applications, especially in the field of data science.</p>"}]}